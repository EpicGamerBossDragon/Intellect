
#ifndef EVAL_HPP
#define EVAL_HPP
constexpr int PIECE_VALUES[6] = {100, 300, 300, 500, 900, 20000};
//phase
constexpr int PHASE_VALUES[6] = {0, 1, 1, 2, 5, 0};
constexpr int MAX_PHASE = 26;

//mobility
constexpr int MG_MOBILITY[6] = {0, 4, 4, 3, 1, 0, };
constexpr int EG_MOBILITY[6] = {0, 2, 2, 3, 6, 0, };


constexpr int MAX_PIECE_BITS[6] = {4, 8, 13, 14, 27, 8};

//pawn structure values
constexpr int PASSED_VALUE[8] = {0, 30, 25, 20, 15, 13, 10, 0}; //From white point of view
constexpr int EG_PASSED_BONUS = 20;
constexpr int MG_DOUBLED_VALUE = 2;
constexpr int EG_DOUBLED_VALUE = 8;
constexpr int MG_ISOLATED_VALUE = 13;
constexpr int EG_ISOLATED_VALUE = 10;

//piece values
constexpr int MG_PIECE_VALUES[6] = {96, 312, 330, 530, 999, 0, };
constexpr int EG_PIECE_VALUES[6] = {105, 308, 335, 540, 992, 0, };

//king safety
constexpr int KING_ATTACKS[6] = {0, 4, 4, 4, 6, 0};
constexpr int SEMIOPEN_KING_FILE_VALUE = 10;

//additional terms
constexpr int MG_BISHOP_PAIR = 9;
constexpr int EG_BISHOP_PAIR = 39;
constexpr int MG_PST_VALUES[6][64] = 
{
{
0, 0, 0, 0, 0, 0, 0, 0,
28, -8, -65, 7, -3, -15, -80, -76,
-55, -28, -18, -22, -16, 59, -34, -59, 
-30, -18, -21, -11, -4, -34, -24, -34,
-45, -27, -20, -8, -4, -14, -35, -57,
-41, -37, -10, -21, -9, -22, -1, -32,
-38, -20, -30, -26, -20, 7, 19, -32,
0, 0, 0, 0, 0, 0, 0, 0, 
},
{
-267, -134, -86, -46, 116, -138, -125, -73,
-64, -5, 70, 39, 56, 74, -57, -38,
5, 31, 3, 50, 87, 157, 45, 8,
18, 11, -2, 30, 9, 6, -1, 38,
13, -6, 31, 19, 31, 16, 9, -5,
-10, 4, 21, 25, 11, 22, 18, -13, 
-14, -8, 24, 23, 25, 32, 6, 9,
-51, -4, -38, 7, -10, -7, -4, -40,
},
{
-46, -86, -84, -142, -124, -62, -7, -76,
3, -2, 2, 39, -34, 77, 0, 39,
-17, -10, 28, 27, 31, 43, 108, 17, 
-17, 0, 19, 17, 23, -17, 19, 14,
-8, 22, 3, 43, 22, 19, 2, -8,
34, 42, 27, 14, 26, 31, 25, 14,
-11, 52, 4, 21, 28, 57, 56, 27,
44, 25, 29, 12, 18, 10, 31, 9, 
},
{
-61, -20, -81, -17, 41, 114, -76, -55,
-43, -81, -39, -38, -44, 118, -47, -45,
-21, -55, -42, 2, 9, -1, 19, -1,
-63, -10, -48, 7, -44, -4, -26, -35, 
-59, -49, -31, -64, -23, -59, -87, -69,
-31, -54, -31, -25, -36, -25, 37, -2,
-41, -68, -40, -45, -42, -22, -36, -91,
-34, -28, -16, -6, 2, -6, -48, -23, 
},
{
-112, 31, 55, 11, 63, 18, -50, -10,
-51, -58, -67, -130, -118, 20, -38, 75,
-17, -48, -44, -26, -21, -1, -55, -9,
-28, -37, -22, -52, -18, -39, 12, -27, 
-11, -56, -33, -22, -25, -14, -3, -27,
-53, -10, -4, -15, -10, -9, -27, -30,
-20, -15, 1, 3, 14, 24, 35, -40,
-6, 1, 10, 11, -18, 19, -28, 4,
},
{
-88, -9, 77, 105, -55, -80, 122, -99, 
-101, 53, 89, 40, -31, 32, -130, 23,
98, 65, -73, 71, -19, 63, 82, -29,
49, 93, -42, 7, -121, 34, 46, -53,
-10, 90, 103, -29, -17, -37, -46, -104, 
-18, 49, 10, -63, -35, -23, -5, -12,
-65, -50, -46, -68, -63, -25, 15, -1,
-86, 21, 13, -92, -3, -28, 21, -1,
},
};
constexpr int EG_PST_VALUES[6][64] = 
{
{
0, 0, 0, 0, 0, 0, 0, 0,
148, 130, 138, 104, 72, 123, 151, 153,
86, 69, 49, 39, 29, 2, 40, 68,
10, 1, -5, -22, -26, -10, -6, -11, 
-12, -17, -22, -30, -31, -26, -19, -20,
-13, -10, -33, -17, -23, -20, -31, -25,
-5, -13, -6, -2, -11, -14, -34, -24,
0, 0, 0, 0, 0, 0, 0, 0,
},
{
-41, -23, -69, 5, -26, -6, -15, -49,
19, -20, -56, -63, -13, -26, 4, -34, 
-39, -25, 5, -24, -2, -23, -9, -18,
-7, 19, 17, 32, 24, 30, 7, -52,
-8, 23, 8, 22, 12, 3, 3, -22,
-46, 0, -9, 14, 16, 2, -6, 10,
-30, -60, -16, 4, -8, 15, -34, -24,
-57, -8, 19, -9, -3, -16, -6, 54, 
},
{
-4, -52, -32, -8, -28, -1, -4, 21,
-51, -21, -27, -44, -13, -39, -23, -26,
-15, -17, -29, -21, -10, -4, -53, -18,
-4, -11, -33, 0, -21, -31, -43, -34,
-41, -38, -13, -9, -14, -22, -31, -46, 
-30, -23, -31, -3, -13, -13, -14, -19,
-7, -53, -30, -17, -31, -9, -32, -30,
-56, -43, -54, -17, -30, -36, -26, -42,
},
{
16, 3, -15, -10, -14, -25, -4, -2,
-17, 15, -3, 3, -5, -35, 9, -7, 
6, 7, -3, -17, -33, -42, -30, -24,
1, -20, 3, -20, -12, -9, -28, -21,
-7, 1, -27, 2, -11, -13, -12, -18,
-5, 4, -11, -21, -6, -8, -74, -30,
4, -8, 7, -6, -21, -22, -5, -28, 
-5, -8, -7, -18, -30, -21, -19, -32,
},
{
99, 25, 6, 29, -97, 53, 86, 38,
54, 43, 45, 147, 86, 22, 46, -84,
-23, -7, 49, 19, 105, 17, 55, -38,
22, 10, -25, 59, -21, 18, 32, -2,
-1, 74, 63, 4, 28, -1, 58, 50,
-3, 0, 31, 16, 28, 26, 62, 57,
49, 63, -19, 35, -16, -36, -68, 98,
-25, -38, 6, -16, 63, -89, 27, -18, 
},
{
-116, 9, -25, -23, -10, 25, 19, -63,
17, 39, -21, -21, 23, 14, 29, 16,
-48, -9, 24, -11, 10, 5, 19, 11,
-44, 1, 10, 19, 9, 15, 10, 16, 
-35, -31, -9, 24, 14, 18, 16, 1,
-7, -8, 5, 24, 25, 20, -2, -14,
-20, 9, 23, 29, 29, 17, -1, -17,
-22, -33, -15, 7, -20, -19, -38, -55,
},
};

constexpr int KING_EDGE[64] = 
{
  -100,  -95,  -90,  -90,  -90,  -90,  -95,  -100,  
  -95,  -50,  -50,  -50,  -50,  -50,  -50,  -95,  
  -90,  -50,  -10,  -10,  -10,  -10,  -50,  -90,  
  -90,  -50,  -10,    0,    0,  -10,  -50,  -90,  
  -90,  -50,  -10,    0,    0,  -10,  -50,  -90,  
  -90,  -50,  -10,  -10,  -10,  -10,  -50,  -90,  
  -95,  -50,  -50,  -50,  -50,  -50,  -50,  -95,  
  -100,  -95,  -90,  -90,  -90,  -90,  -95,  -100,
};

constexpr int flip_board[2][64] = {
{
		0, 1, 2, 3, 4, 5, 6, 7,
		8, 9, 10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
		32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 58, 59, 60, 61, 62, 63
},
{
  56, 57, 58, 59, 60, 61, 62, 63,
  48, 49, 50, 51, 52, 53, 54, 55,
  40, 41, 42, 43, 44, 45, 46, 47,
  32, 33, 34, 35, 36, 37, 38, 39,
  24, 25, 26, 27, 28, 29, 30, 31,
  16, 17, 18, 19, 20, 21, 22, 23,
  8, 9, 10, 11, 12, 13, 14, 15,
  0, 1, 2, 3, 4, 5, 6, 7
}
};


#endif



