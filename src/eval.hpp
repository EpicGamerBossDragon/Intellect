
#ifndef EVAL_HPP
#define EVAL_HPP
constexpr int PIECE_VALUES[6] = {100, 300, 300, 500, 900, 20000};
//phase
constexpr int PHASE_VALUES[6] = {0, 1, 1, 2, 5, 0};
constexpr int MAX_PHASE = 26;

//mobility
constexpr int MG_MOBILITY[6] = {0, 4, 4, 2, 1, 0};
constexpr int EG_MOBILITY[6] = {0, 2, 2, 2, 2, 0};
constexpr int MAX_PIECE_BITS[6] = {4, 8, 13, 14, 27, 8};

//pawn structure values
constexpr int PASSED_VALUE[8] = {0, 20, 12, 7, 4, 3, 2, 0}; //From white point of view
constexpr int EG_PASSED_BONUS = 10;
constexpr int MG_DOUBLED_VALUE = 6;
constexpr int EG_DOUBLED_VALUE = 10;
constexpr int MG_ISOLATED_VALUE = 15;
constexpr int EG_ISOLATED_VALUE = 20;

//piece values
constexpr int MG_PIECE_VALUES[6] = {96, 312, 330, 530, 999, 0, };
constexpr int EG_PIECE_VALUES[6] = {105, 308, 335, 540, 992, 0, };

//king safety
constexpr int KING_ATTACKS[6] = {0, 4, 4, 6, 10, 0};

//additional terms
constexpr int MG_BISHOP_PAIR = 15;
constexpr int EG_BISHOP_PAIR = 32;

//middle game and opening pst
constexpr int MG_PST_VALUES[6][64] = 
{
{
0, 0, 0, 0, 0, 0, 0, 0, 
33, 73, 12, 72, 60, 66, -3, -27,
-38, -15, -3, 5, 3, 80, -9, -42, 
-21, 1, -10, -2, 3, -23, -11, -17,
-36, -5, -13, 1, -1, -5, -24, -52, 
-32, -22, -3, -16, -1, -21, 5, -21,
-23, 1, -25, -25, -15, 24, 28, -19, 
0, 0, 0, 0, 0, 0, 0, 0,
},
{
-232, -111, -83, -79, 117, -85, -44, -58, 
-77, 12, 73, 56, 75, 107, -32, -1,
4, 32, 30, 75, 116, 172, 102, 37, 
5, 18, 13, 45, 30, 29, 16, 47, 
4, -5, 32, 24, 36, 10, 14, -18, 
-23, -3, 22, 21, 6, 19, 11, -22,
-31, -13, 14, 11, 16, 33, -1, 6, 
-56, -13, -51, -12, -23, -10, -15, -15,
},
{
-29, -55, -77, -71, -85, -43, 42, -35,
10, 19, -4, 46, -21, 78, 5, 18,
-17, 3, 53, 26, 62, 82, 69, 20, 
-12, 7, 32, 34, 30, 4, 6, 27, 
-19, 25, 14, 50, 37, 14, 15, -13,
33, 47, 27, 23, 23, 44, 20, 27, 
-18, 45, 9, 8, 33, 74, 67, 28,
33, 22, 18, 17, 11, 15, -2, 10, 
},
{
-4, 29, 0, 52, 84, 43, -5, 26,
-18, -24, 6, 27, 21, 107, -6, 0, 
-4, -30, -7, 23, 30, 36, 52, 44, 
-51, -17, -41, 32, -37, 29, -23, -20,
-54, -40, -28, -57, -8, -42, -60, -42, 
-12, -63, -16, -10, -31, 2, 26, -1,
-26, -51, -27, -26, -35, -13, -5, -92, 
-15, -9, 3, 11, 9, 7, -55, -24,
},
{
-53, 30, 60, 36, 30, 67, 31, 51, 
-48, -41, -28, -65, -71, 37, 33, 96,
-14, -55, -29, 3, 24, 56, -10, 28, 
-11, -40, -9, -41, -9, -16, 21, -9, 
-8, -39, -38, -26, -12, -19, 14, -30,
-50, -8, -7, -12, -15, -5, -18, -27, 
-13, -1, -1, 3, 19, 33, 40, 5, 
-1, -2, 5, 14, -17, 2, -59, -15,
}, 
{
-105, 72, 4, 34, -68, -11, 51, -28,
-20, -2, 18, -31, -34, 29, -81, 12, 
27, 10, -6, 16, -26, 60, 45, 4, 
-22, 22, -43, -40, -80, -29, -9, -46, 
-5, 19, 34, -26, -42, -58, -47, -29,
-7, 10, -3, -58, -72, -28, -6, -1, 
-28, -17, -27, -69, -64, -8, 4, 2, 
-55, 34, 22, -71, 6, -31, 24, 8,
},
};

//endgame pst table
constexpr int EG_PST_VALUES[6][64] =
{
{
0, 0, 0, 0, 0, 0, 0, 0, 
193, 159, 167, 143, 109, 158, 186, 188,
119, 110, 88, 74, 64, 35, 73, 101, 
37, 22, 14, 5, -9, 9, 19, 8,
11, 6, -9, -17, -18, -13, 2, -4, 
7, 19, -22, 6, -12, -3, -6, -8,
14, 12, 15, 17, 10, -5, -9, -11,
0, 0, 0, 0, 0, 0, 0, 0, 
},
{
-56, -40, -62, 16, -47, -3, -14, -64,
30, -21, -57, -56, -12, -31, 5, -31, 
-53, -26, 16, -25, -1, -32, 0, -13,
4, 16, 24, 41, 37, 41, 24, -37, 
5, 22, 15, 27, 19, 6, 18, -27,
-41, 1, -6, 25, 31, -2, -7, 9, 
-43, -55, -9, 14, -3, 14, -11, -5, 
-60, -17, 10, 6, -10, -31, -23, -15,
},
{
-1, -51, -17, -1, -27, -4, -7, 10, 
-50, -14, -16, -27, 6, -10, -2, -7, 
-2, -2, -20, 4, 3, 3, -30, 13,
19, 2, -6, 25, 8, -2, -8, -21, 
-12, -13, 4, 14, 3, 15, -19, -45,
-15, 2, -4, 20, 14, 6, 11, -12, 
16, -14, -13, 30, -6, 8, -11, -13, 
-25, -10, -1, 4, -1, -25, -19, -41,
},
{
25, 12, -10, -7, 7, -5, -9, 3, 
-2, 16, 6, 6, 2, -16, 12, 0,
11, 28, 8, -2, -20, -27, -19, -17, 
14, 3, 14, -15, 11, 0, -17, -2, 
10, 20, -14, 13, -8, -4, -9, -21,
2, 25, -6, -16, 7, -5, -53, -9, 
11, -3, 16, 1, -10, -15, 2, -25,
0, -5, -5, -7, -17, -10, -2, -19, 
},
{
40, 58, 7, 38, -34, 24, 55, 67,
45, 22, 30, 78, 69, 63, 39, -43, 
-9, -28, 62, 6, 74, 38, 46, -25,
-3, 19, -20, 60, 22, 25, 41, 7, 
-20, 35, 64, 11, 25, 6, 65, 41,
2, -19, 26, -3, 13, 25, 53, 40, 
22, 14, -16, 18, -23, -23, -61, 17, 
-10, -23, 17, -17, 26, -50, 34, 3,
},
{
-119, 14, -28, -26, -37, 28, 4, -66,
-2, 32, -30, -16, 22, 3, 24, 9,
-33, 0, 37, -2, 17, 22, 40, 24, 
-29, 6, 19, 36, 14, 28, 19, 17,
-48, -22, 4, 27, 15, 23, 5, -10, 
-4, -13, 4, 23, 30, 17, -9, -19,
-37, -4, 22, 28, 28, 6, -7, -18, 
-23, -44, -16, 2, -17, -24, -37, -54,
},
};

constexpr int KING_EDGE[64] = 
{
  -100,  -95,  -90,  -90,  -90,  -90,  -95,  -100,  
  -95,  -50,  -50,  -50,  -50,  -50,  -50,  -95,  
  -90,  -50,  -10,  -10,  -10,  -10,  -50,  -90,  
  -90,  -50,  -10,    0,    0,  -10,  -50,  -90,  
  -90,  -50,  -10,    0,    0,  -10,  -50,  -90,  
  -90,  -50,  -10,  -10,  -10,  -10,  -50,  -90,  
  -95,  -50,  -50,  -50,  -50,  -50,  -50,  -95,  
  -100,  -95,  -90,  -90,  -90,  -90,  -95,  -100,
};

constexpr int flip_board[2][64] = {
{
		0, 1, 2, 3, 4, 5, 6, 7,
		8, 9, 10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
		32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 58, 59, 60, 61, 62, 63
},
{
  56, 57, 58, 59, 60, 61, 62, 63,
  48, 49, 50, 51, 52, 53, 54, 55,
  40, 41, 42, 43, 44, 45, 46, 47,
  32, 33, 34, 35, 36, 37, 38, 39,
  24, 25, 26, 27, 28, 29, 30, 31,
  16, 17, 18, 19, 20, 21, 22, 23,
  8, 9, 10, 11, 12, 13, 14, 15,
  0, 1, 2, 3, 4, 5, 6, 7
}
};




#endif



